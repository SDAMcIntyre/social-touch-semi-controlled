import logging
from pathlib import Path

# Setup a basic logger
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

from utils.should_process_task import should_process_task  # noqa: E402

from preprocessing.led_analysis import (
    ROIManager,
    LEDROIFilesHandler
)


def generate_led_roi(
        video_path: Path, 
        metadata_path: Path,
        output_video_path: Path,
        *,
        force_processing: bool = False
) -> bool:
    """
    Identifies and saves the LED Region of Interest (ROI) from a video file.

    This function is idempotent: it checks if the output metadata file
    already exists. If it does, the function logs a message and skips
    processing.

    Args:
        video_path (Path): The path to the input MP4 video file.
        metadata_path (Path): The path to the input metadata JSON file, which
                             is created by a manual process.
        output_video_path (Path): The path where the output ROI video will be saved.
        force_processing (bool): If True, re-processes the task even if output exists.

    Returns:
        bool: True if the process completed successfully (or was skipped), False on failure.
        
    Raises:
        FileNotFoundError: If the prerequisite `metadata_path` file does not exist.
    """
    # 1. Idempotency Check
    if not should_process_task(
            input_paths=[video_path, metadata_path], 
            output_paths=[output_video_path], 
            force=force_processing):
        logging.info(f"Output file already exists. Skipping ROI definition for '{video_path.name}'.")
        return True

    # 2. Prerequisite Check for the manually generated metadata file.
    # This check is crucial. Its failure is a setup error, not a runtime error.
    # Therefore, we raise an exception immediately with a clear, actionable message.
    if not metadata_path.exists():
        error_message = (
            f"Metadata file not found at '{metadata_path}'.\n"
            "This file is generated by the manual pipeline script and is required to proceed.\n"
            "➡️ Please run the manual selection script first."
        )
        raise FileNotFoundError(error_message)

    logging.info(f"Starting LED ROI definition for '{video_path.name}'.")
    
    try:
        # 3. Core Logic is wrapped in error handling for runtime issues.
        led_roi = ROIManager(video_path)
        file_handler = LEDROIFilesHandler()
        led_roi.set_parameters(file_handler.load_metadata(metadata_path))
        
        led_roi.extract_roi_video()
        file_handler.save_video(output_video_path, led_roi.roi_frames, led_roi.metadata['fps'])
        
        logging.info(f"Successfully generated LED ROI video for '{video_path.name}'.")
        return True

    # 4. Robust Error Handling for runtime processing.
    except FileNotFoundError as e:
        # This will now correctly catch if the *video* file is not found by ROIManager.
        logging.error(f"Input video file could not be found during processing for '{video_path.name}': {e}")
        return False
    except Exception as e:
        # A general catch-all for other unexpected errors during ROI extraction.
        logging.error(f"An unexpected error occurred during ROI definition for '{video_path.name}': {e}")
        return False